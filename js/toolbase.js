class Tool {

    static toolIdCounter = 0;

    constructor() {
        this.toolAutoGeneratedId = `tool-id-${Tool.toolIdCounter++}`;
    }

    getName() {
        return 'A Nice Tool';
    }

    getDescription() {
        return 'Just a testing tool'
    }

    getButtonCssClass() {
        return 'unknownTool'
    }

    getId() {
        return this.toolAutoGeneratedId;
    }

    // Called when the tool was selected by the user
    onActivate() {

    }

    // Called when another tool was selected by the user
    onDeactivate() {

    }
}

class ToolManager extends EventEmitter {

    constructor() {
        super();
        this.tools = [];
        this.selectedToolInternal = undefined;
    }

    addTool(tool) {
        if(this.tools.indexOf(tool) === -1) {
            this.emitEvent('tooladd', tool, this.tools.length);
            this.tools.push(tool);

            if(!this.selectedTool) {
                this.selectedTool = tool;
            }

        } else {
            console.warn(`Tool "${tool.getName()}" already exists in ToolManager, not adding it twice.`);
        }
    }

    removeTool(tool) {
        const toolIndex = this.tools.indexOf(tool);
        if(toolIndex != -1) {
            this.emitEvent('toolremove', tool, toolIndex);
            this.tools.splice(toolIndex, 1);
        }
    }

    getTools() {
        return this.tools;
    }

    get selectedTool() {
        return this.selectedToolInternal;
    }  
    
    set selectedTool(tool) {
        if(this.selectedTool !== tool) {
            if(this.selectedTool !== undefined) {
                this.selectedTool.onDeactivate();
            } 

            this.emitEvent('toolselect', tool);
            this.selectedToolInternal = tool;
            tool.onActivate();
        }
    }
}

class ToolBar {
    constructor(toolManager, htmlElement) {
        this.toolManager = toolManager;
        this.toolButtons = {};
        this.htmlElement = htmlElement;
        this.activeClassName = 'active';

        this.toolManager.getTools().forEach((t) => this.addTool(t))

        this.toolManager.addEventListener('tooladd', (t) => this.addTool(t));
        this.toolManager.addEventListener('toolremove', (t) => this.removeTool(t));
        this.toolManager.addEventListener('toolselect', (t) => this.onToolSelect(t));
    }

    addTool(tool) {
        // Create element & element setup
        const button = document.createElement('div');
        button.classList.add(tool.getButtonCssClass());
        button.title = `${tool.getName()}\n\n${tool.getDescription()}`;
        this.htmlElement.appendChild(button);
        // Register click handler
        button.onclick = () => this.toolManager.selectedTool = tool;
        // Save html object for management
        this.toolButtons[tool.getId()] = button;
        // When this is the currently selected tool, set the 'active' class
        if(this.toolManager.selectedTool === tool) {
            button.classList.add(this.activeClassName);
        }
    }

    removeTool(tool) {
        const toolId = tool.getId();
        const button = this.toolButtons[toolId];
        if(typeof(button !== 'undefined')) {
            this.htmlElement.removeChld(button);
            delete this.toolButtons[toolId];
        }
    }

    onToolSelect(tool) {
        // Remove all active classes
        Object.values(this.toolButtons).forEach(otherButton => {
            otherButton.classList.remove(this.activeClassName);
        });
        
        // (Re-)add the active class to the selected button
        const button = this.toolButtons[tool.getId()];
        if(button) {
            button.classList.add(this.activeClassName);
        }
    }
}